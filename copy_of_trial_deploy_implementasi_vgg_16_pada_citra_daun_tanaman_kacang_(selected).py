# -*- coding: utf-8 -*-
"""Copy of Trial Deploy Implementasi VGG-16 Pada Citra Daun Tanaman Kacang (Selected)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1orkPNfBTl6soJ6wKWXlMu2ll4b5fqnJo
"""

from google.colab import drive
drive.mount('/content/drive')

"""## Import Library"""

import warnings
warnings.filterwarnings('ignore')

import os
import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
import keras

"""## Data Preprocessing"""

TRAIN_DIR = "/content/drive/MyDrive/Data Mining/Dataset/train"
VALIDATION_DIR = "/content/drive/MyDrive/Data Mining/Dataset/val"

BATCH_SIZE = 32
IMAGE_SIZE =(224,224)
EPOCHS = 100

train_path = TRAIN_DIR
validation_path = VALIDATION_DIR

def count_images_in_folders(path):
    class_counts = {}
    for class_folder in os.listdir(path):
        class_path = os.path.join(path, class_folder)
        if os.path.isdir(class_path):
            num_images = len(os.listdir(class_path))
            class_counts[class_folder] = num_images
    return class_counts

train_counts = count_images_in_folders(train_path)
validation_counts = count_images_in_folders(validation_path)

fig, ax = plt.subplots(1, 2, figsize=(18, 5))

ax[0].bar(train_counts.keys(), train_counts.values())
ax[0].set_title('Train Class Distribution')
ax[0].set_xlabel('Classes')
ax[0].set_ylabel('Number of Images')

ax[1].bar(validation_counts.keys(), validation_counts.values())
ax[1].set_title('Validation Class Distribution')
ax[1].set_xlabel('Classes')
ax[1].set_ylabel('Number of Images')

plt.tight_layout()
plt.show()

"""## Split Data"""

train_dataset, validation_dataset = tf.keras.utils.image_dataset_from_directory(
    directory=TRAIN_DIR,
    image_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    label_mode="categorical",
    color_mode = "rgb",
    validation_split=0.2,
    subset="both",
    seed=0
)

test_dataset = tf.keras.utils.image_dataset_from_directory(
    directory=VALIDATION_DIR,
    batch_size=BATCH_SIZE,
    image_size=IMAGE_SIZE,
    label_mode="categorical",
    color_mode = "rgb"
)

"""## Data Augmentation

Augmentasi gambar yang digunakan disini adalah mengubah ukuran menjadi 224 x 224 piksel dengan warna rgb, membalik gambar secara horizontal dan vertikal, memutar gambar secara acak hingga Â±20% dari sudut, melakukan zoom in atau zoom out, mengubah kontras gambar, dan mengubah kecerahan gambar.
"""

augmentation_layers = tf.keras.Sequential([
    tf.keras.Input(shape=(224, 224, 3)),
    tf.keras.layers.RandomFlip("horizontal_and_vertical"),
    tf.keras.layers.RandomRotation(0.2),
    tf.keras.layers.RandomZoom(height_factor=(-0.2, 0.2), width_factor=(-0.2, 0.2)),
    tf.keras.layers.RandomContrast(0.2),
    tf.keras.layers.RandomBrightness(0.2),
])

train_dataset = train_dataset.map(lambda x, y: (augmentation_layers(x, training=True), y))

"""## Model Development

### Model with VGG-16
"""

base_model_vgg16 = tf.keras.applications.VGG16(
    include_top=False,
    weights = "imagenet",
    input_shape=(224, 224, 3)
)

base_model_vgg16.trainable = True

vgg16_model = tf.keras.models.Sequential([
    tf.keras.Input(shape=(224,224,3)),
    tf.keras.layers.Rescaling(1./255),
    base_model_vgg16,
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(units=2042,activation= "relu"),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(units=2042,activation= "relu"),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(units=2042,activation= "relu"),
    tf.keras.layers.Dense(units=3,activation= "softmax"),
])


vgg16_model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),
    loss="categorical_crossentropy",
    metrics= ['accuracy', keras.metrics.Precision(name="precision"), keras.metrics.Recall(name="recall"), keras.metrics.F1Score(average='macro', threshold=0.5, name="f1_score")],
)

vgg16_model.summary()

"""#### Model Training"""

earlyStopping = tf.keras.callbacks.EarlyStopping( monitor="val_loss", patience=10,
                                         verbose=1,  restore_best_weights=True)

vgg16_history = vgg16_model.fit(
	train_dataset,
	epochs=EPOCHS,
	validation_data=validation_dataset,
	callbacks = [earlyStopping]
)

vgg16_scores = vgg16_model.evaluate(validation_dataset)

print("")
print(f"Val Accuracy: {vgg16_scores[1]}")
print(f"Val Precision: {vgg16_scores[2]}")
print(f"Val Recall: {vgg16_scores[3]}")
print(f"Val F1 Score: {vgg16_scores[4]}")

plt.figure(figsize=(12, 5))
plt.suptitle('Grafik Accuracy dan Loss Saat Pelatihan')

plt.subplot(1, 2, 1)
plt.plot(vgg16_history.history['loss'], label='loss')
plt.plot(vgg16_history.history['val_loss'], label = 'val_loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(['Train', 'Validation'], loc='upper left')

plt.subplot(1, 2, 2)
plt.plot(vgg16_history.history['accuracy'], label='accuracy')
plt.plot(vgg16_history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

vgg16_scores = vgg16_model.evaluate(test_dataset)
print(f"Accuracy: {vgg16_scores[1]}")
print(f"Precision: {vgg16_scores[2]}")
print(f"Recall: {vgg16_scores[3]}")
print(f"F1 Score: {vgg16_scores[4]}")

vgg16_model.save("vgg16_model.keras")